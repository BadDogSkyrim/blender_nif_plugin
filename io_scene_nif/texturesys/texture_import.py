"""This script contains helper methods to import textures."""

# ***** BEGIN LICENSE BLOCK *****
# 
# Copyright Â© 2005-2013, NIF File Format Library and Tools contributors.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#	* Redistributions of source code must retain the above copyright
#	  notice, this list of conditions and the following disclaimer.
# 
#	* Redistributions in binary form must reproduce the above
#	  copyright notice, this list of conditions and the following
#	  disclaimer in the documentation and/or other materials provided
#	  with the distribution.
# 
#	* Neither the name of the NIF File Format Library and Tools
#	  project nor the names of its contributors may be used to endorse
#	  or promote products derived from this software without specific
#	  prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# ***** END LICENSE BLOCK *****


from pyffi.formats.nif import NifFormat

class Texture():

	def __init__(self, parent):
		self.nif_import = parent
		self.textureloader = None
		self.used_slots = []
		self.b_mat = None
		
		self.bump_map = None 
		self.dark_map = None
		self.decal_map = None
		self.detail_map = None
		self.diffuse_map = None 
		self.env_map = None
		self.gloss_map = None
		self.glow_map = None
		self.normal_map = None
		self.reflection_map = None
		self.unknown_2_map = None
		
		self.bumptex = None
		self.darktex = None
		self.decaltex = None
		self.detailtex = None
		self.diffusetex = None
		self.envtex = None
		self.glosstex = None
		self.glowtex = None
		self.normaltex = None
		self.reftex = None
		self.unk2tex = None
		
		
	def set_texture_loader(self, textureloader):
		self.textureloader = textureloader


	def import_nitextureprop_textures(self, b_mat, n_texture_prop):
		if(self.b_mat != b_mat):
			self.cached = False
			
		if n_texture_prop.has_base_texture:
			self.diffusetex = 1
			self.import_image_texture(b_mat, n_texture_prop)
	
		if n_texture_prop.has_bump_map_texture:
			self.bumptex = 1
			self.import_image_texture(b_mat, n_texture_prop)
				
		if n_texture_prop.has_normal_texture:
			self.normaltex = 1
			self.import_image_texture(b_mat, n_texture_prop)
		
		if n_texture_prop.has_glow_texture:
			self.glowtex = 1
			self.import_image_texture(b_mat, n_texture_prop)
				
		if n_texture_prop.has_gloss_texture:
			self.glosstex = 1
			self.import_image_texture(b_mat, n_texture_prop)
			
		if n_texture_prop.has_dark_texture:
			self.darktex = 1
			self.import_image_texture(b_mat, n_texture_prop)
		
		if n_texture_prop.has_detail_texture:
			self.detailtex = 1
			self.import_image_texture(b_mat, n_texture_prop)
		
		self.cached = True
		self.b_mat = b_mat
		
		
	def import_texture_extra_shader(self, b_mat,n_texture_prop, extra_datas):
		# extra texture shader slots
		for shader_tex_desc in n_texture_prop.shader_textures:
			
			if not shader_tex_desc.is_used:
				continue
			
			# it is used, figure out the slot it is used for
			for extra in extra_datas:
				if extra.integer_data == shader_tex_desc.map_index:
					shader_name = extra.name
					break
			else:
				self.nif_import.warning("No slot for shader texture %s."
										% shader_tex_desc.texture_data.source.file_name)
				continue
			try:
				extra_shader_index = (self.nif_import.EXTRA_SHADER_TEXTURES.index(shader_name))
			except ValueError:
				# shader_name not in self.EXTRA_SHADER_TEXTURES
				self.nif_import.warning(
					"No slot for shader texture %s."
					% shader_tex_desc.texture_data.source.file_name)
				continue
			
			self.import_shader_by_type(shader_tex_desc, extra_shader_index)
		
			
	def import_shader_by_type(self, b_mat, shader_tex_desc, extra_shader_index):
		if extra_shader_index == 0:
			# EnvironmentMapIndex
			if shader_tex_desc.texture_data.source.file_name.lower().startswith("rrt_engine_env_map"):
				# sid meier's railroads: env map generated by engine
				# we can skip this
				print("Ignoring Env Map as generated by Engine")
			# XXX TODO:, civ4 uses this
			self.nif_import.warning("Skipping environment map texture.")
		elif extra_shader_index == 1:
			# NormalMapIndex
			bumpTexDesc = shader_tex_desc.texture_data
			self.bumptex = 1
			self.import_image_texture(b_mat, bumpTexDesc)
		elif extra_shader_index == 2:
			# SpecularIntensityIndex
			glossTexDesc = shader_tex_desc.texture_data
			self.glosstex = 1
			self.import_image_texture(b_mat, glossTexDesc) 
		elif extra_shader_index == 3:
			# EnvironmentIntensityIndex (this is reflection)
			refTexDesc = shader_tex_desc.texture_data
			self.reftex = 1
			self.import_image_texture(b_mat, refTexDesc)
		elif extra_shader_index == 4:
			# LightCubeMapIndex
			if shader_tex_desc.texture_data.source.file_name.lower().startswith(
					"rrt_cube_light_map"):
				# sid meier's railroads: light map generated by engine
				# we can skip this
				print("Ignoring Env Map as generated by Engine")
			self.nif_import.warning("Skipping light cube texture.")
		elif extra_shader_index == 5:
			# ShadowTextureIndex
			self.nif_import.warning("Skipping shadow texture.")
		
		
	def import_bsshaderproperty(self, b_mat, bsShaderProperty):
		ImageTexFile = bsShaderProperty.texture_set.textures[0].decode()
		if ImageTexFile:
			self.diffusetex = 1
			self.import_image_texture(b_mat, ImageTexFile)
			
		ImageTexFile = bsShaderProperty.texture_set.textures[1].decode()
		if ImageTexFile:
			self.normaltex = 1
			self.import_image_texture(b_mat, ImageTexFile)
		
		ImageTexFile = bsShaderProperty.texture_set.textures[2].decode()
		if ImageTexFile:
			self.glowtex = 1
			self.import_image_texture(b_mat, ImageTexFile)

		ImageTexFile = bsShaderProperty.texture_set.textures[3].decode()
		if ImageTexFile:
			self.detailtex = 1
			self.import_image_texture(b_mat, ImageTexFile)
			
		if isinstance(bsShaderProperty, NifFormat.BSLightingShaderProperty):
			ImageTexFile = bsShaderProperty.texture_set.textures[6].decode()
			if ImageTexFile:
				self.decaltex = 1
				self.import_image_texture(b_mat, ImageTexFile)
	
			ImageTexFile = bsShaderProperty.texture_set.textures[7].decode()
			if ImageTexFile:
				self.glosstex = 1
				self.import_image_texture(b_mat, ImageTexFile)
				
	def import_texture_effect(self, b_mat, textureEffect):
		try:
			image_texture = textureEffect.base_texture
		except:
			image_texture = textureEffect
		
		b_mat_texslot = b_mat.texture_slots.add()
		try:
			b_mat_texslot.texture = self.textureloader.import_texture_source(
										image_texture.source)
		except:
			b_mat_texslot.texture = self.textureloader.import_texture_source(
										image_texture)
		b_mat_texslot.use = True

		# Influence mapping
		
		# Mapping
		b_mat_texslot.texture_coords = 'UV'
		try:
			b_mat_texslot.uv_layer = self.get_uv_layer_name(
										image_texture.uv_set)
		except:
			b_mat_texslot.uv_layer = self.get_uv_layer_name(0)
		
		# Influence
		b_mat_texslot.use_map_color_diffuse = True
		try:
			b_mat_texslot.blend_type = self.get_b_blend_type_from_n_apply_mode(
               							image_texture.source)
		except:
			b_mat_texslot.blend_type = self.get_b_blend_type_from_n_apply_mode(
               							image_texture)
		
		if(self.nif_import.ni_alpha_prop):
			b_mat_texslot.use_map_alpha = True
		# update: needed later
		self.env_map = b_mat_texslot
# 		
# 		envmapTexture = self.textureloader.import_texture_source(textureEffect.source_texture)
# 		if envmapTexture:
# 			# set the texture to use face reflection coordinates
# 			texco = 'REFLECTION'
# 			# map the texture to the base color channel
# 			mapto = FIXME: .use_map_color_diffuse
# 			# set the texture for the material
# 			material.setTexture(3, envmapTexture, texco, mapto)
# 			menvmapTexture = material.getTextures()[3]
# 			menvmapTexture.blend_type = 'ADD'


# 		has_base_texture
# 	 	has_bump_map_texture
# 	 	has_dark_texture
# 	 	has_decal_0_texture
# 	 	has_decal_1_texture
# 	 	has_decal_2_texture
# 	 	has_decal_3_texture
# 	 	has_detail_texture
# 	 	has_gloss_texture
# 	 	has_glow_texture
# 	 	has_normal_texture
# 	 	has_unknown_2_texture	

	def import_image_texture(self, b_mat, n_textureDesc):
		
		

		try:
			if self.diffusetex == 1:
				image_texture = n_textureDesc.base_texture
			elif self.glosstex == 1:
				image_texture = n_textureDesc.base_texture
			elif self.bumptex == 1:
				image_texture = n_textureDesc.bump_map_texture
			elif self.normaltex == 1:
				image_texture = n_textureDesc.normal_map_texture
			elif self.glowtex == 1:
				image_texture = n_textureDesc.glow_texture
			elif self.darktex == 1:
				image_texture = n_textureDesc.base_texture
			elif self.detailtex == 1:
				image_texture = n_textureDesc.base_texture
			elif self.reftex == 1:
				image_texture = n_textureDesc.base_texture
		except:
			image_texture = n_textureDesc

		b_mat_texslot = b_mat.texture_slots.add()
		try:
			b_mat_texslot.texture = self.textureloader.import_texture_source(
										image_texture.source)
		except:
			b_mat_texslot.texture = self.textureloader.import_texture_source(
										image_texture)
		b_mat_texslot.use = True

		# Influence mapping
		if self.bumptex:
			b_mat_texslot.texture.use_normal_map = False # causes artifacts otherwise.
		if self.normaltex:
			b_mat_texslot.texture.use_normal_map = True # causes artifacts otherwise.
		if self.glowtex or self.glosstex:
			b_mat_texslot.texture.use_alpha = False
		
		# Mapping
		b_mat_texslot.texture_coords = 'UV'
		try:
			b_mat_texslot.uv_layer = self.get_uv_layer_name(image_texture.uv_set)
		except:
			b_mat_texslot.uv_layer = self.get_uv_layer_name(0)
		
		# Influence
		if self.diffusetex or self.darktex or self.detailtex or self.reftex or self.envtex:
			b_mat_texslot.use_map_color_diffuse = True
		if self.bumptex or self.normaltex or self.glowtex or self.glosstex:
			b_mat_texslot.use_map_color_diffuse = False
		if self.bumptex or self.normaltex:
			b_mat_texslot.use_map_normal = True
		if self.glowtex or self.reftex:
			b_mat_texslot.use_map_emit = True
		if self.glosstex:
			b_mat_texslot.use_map_specular = True
			b_mat_texslot.use_map_color_spec = True
		if self.reftex:
			b_mat_texslot.use_map_mirror = True

			
		try:
			b_mat_texslot.blend_type = self.get_b_blend_type_from_n_apply_mode(
            							n_textureDesc.apply_mode)
		except:
			b_mat_texslot.blend_type = self.get_b_blend_type_from_n_apply_mode(
            							n_textureDesc)
			
		if(self.nif_import.ni_alpha_prop):
			b_mat_texslot.use_map_alpha = True
		# update: needed later
		if self.bumptex:
			self.bump_map = b_mat_texslot
		if self.darktex:
			self.dark_map = b_mat_texslot
		if self.decaltex:
			self.decal_map = b_mat_texslot
		if self.detailtex:
			self.detail_map = b_mat_texslot
		if self.diffusetex:
			self.diffuse_map = b_mat_texslot
		if self.envtex:
			self.env_map = b_mat_texslot
		if self.glosstex:
			self.gloss_map = b_mat_texslot
		if self.glowtex:
			self.glow_map = b_mat_texslot
		if self.normaltex:
			self.normal_map = b_mat_texslot
		if self.reftex:
			self.reflection_map = b_mat_texslot
			
		image_texture = None
		self.bumptex = None
		self.darktex = None
		self.decaltex = None
		self.detailtex = None
		self.diffusetex = None
		self.envtex = None
		self.glosstex = None
		self.glowtex = None
		self.normaltex = None
		self.reftex = None
		self.unk2tex = None		

	def get_b_blend_type_from_n_apply_mode(self, n_apply_mode):
		# TODO: - Check out n_apply_modes
		if n_apply_mode == NifFormat.ApplyMode.APPLY_MODULATE:
			return "MIX"
		elif n_apply_mode == NifFormat.ApplyMode.APPLY_REPLACE:
			return "COLOR"
		elif n_apply_mode == NifFormat.ApplyMode.APPLY_DECAL:
			return "OVERLAY"
		elif n_apply_mode == NifFormat.ApplyMode.APPLY_HILIGHT:
			return "LIGHTEN"
		elif n_apply_mode == NifFormat.ApplyMode.APPLY_HILIGHT2: # used by Oblivion for parallax
			return "MULTIPLY"
		elif isinstance(n_apply_mode, str):
			return "MIX"
		self.nif_import.warning(
			"Unknown apply mode (%i) in material,"
			" using blend type 'MIX'" % n_apply_mode)
		


	def get_uv_layer_name(self, uvset):
		return "UVMap.%03i" % uvset if uvset != 0 else "UVMap"
	
	
	def get_used_textslots(self, b_mat):	
		self.used_slots = [b_texslot for b_texslot in b_mat.texture_slots if b_texslot != None]
		return self.used_slots
	
	
	def has_base_texture(self, b_mat):
		return self.diffuse_map	
	
	def has_bumpmap_texture(self, b_mat):
		return self.bump_map

	def has__texture(self, b_mat):
		return self.dark_map
	
	def has_decal_map_texture(self, b_mat):
		return self.decal_map
	
	def has_detail_map_texture(self, b_mat):
		return self.detail_map
	
	def has_env_map_texture(self, b_mat):
		return self.env_map
	
	def has_gloss_map_texture(self, b_mat):
		return self.gloss_map
	
	def has_glow_texture(self, b_mat):
		return self.glow_map
	
	def has_normalmap_texture(self, b_mat):
		return self.normal_map

	def has_reflection_map_texture(self, b_mat):
		return self.reflection_map
	
	def has_unknown_2_map_texture(self, b_mat):
		return self.unknown_2_map

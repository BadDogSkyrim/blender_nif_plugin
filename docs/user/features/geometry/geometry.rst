Mesh Geometry
-------------

.. _geometry-mesh:

* The following section deals with :class:`~bpy.types.Object` which are of type 'MESH', containing Mesh Data(Mesh-Object)
* Each :class:`~bpy.types.Object` is exported as a combination of :class:`~pyffi.formats.nif.NifFormat.NiTriShape` and :class:`~pyffi.formats.nif.NifFormat.NiNode`.
* The :class:`~bpy.types.Mesh` is exported to a :class:`~pyffi.formats.nif.NifFormat.NiTriShape`'s :class:`~pyffi.formats.nif.NifFormat.NiTriShapeData`.

**Example:**

#. Start Blender and empty the scene.
#. Create any Mesh-Object to the scene, eg. cube primitive: 

  - **Add(Shift + A) -> Mesh -> Cube**.

#. Set whether the Mesh-object should be Double-sided:
   
  - In the **Properties** Editor, in the **Object Data Tab**
  - Enable/Disable **Double Sided**, see notes for more detail.

#. Give the Object an appropriate name.

  - In the **Object Tab** 
  - Generic names are automatically generated, unique names helps distingush objects, 

#. Export the file: **File -> Export -> NetImmerse/Gamebryo**.

**Notes:**

* The Nif format only supports triangle based geometry.

* Blender quads and n-gons are exported as triangles, which may lead to differences in rendered geometry.

* Strips (:class:`~pyffi.formats.nif.NifFormat.NiTriStrips`) are available but not developer supported
  as they are `unnecessary for current hardware <http://tomsdxfaq.blogspot.com/2005_12_01_archive.html>`_.
  
* Double Sided Mesh - Adds a :class:`~pyffi.formats.nif.NifFormat.NiStencilProperty` or similiar, 
  see :ref:`Properties - Stencil Property <properties-stencil>` for more info.

UV Unwrapping/Mapping
---------------------

.. _geometry-uv:

* UV-unwrapping is the process of unfolding all the faces onto a flat plane, see `Cube Unwrap <http://en.wikipedia.org/wiki/File:Cube_Representative_UV_Unwrapping.png>`_.
* The UV-unwrapping process creates a UV Map layer.
* The UV Map Layer is used to layer connect a :class:`~bpy.types.Texture` to :class:`~bpy.types.Mesh` and allows visual representation of where each face is located on texture.
* Each :class:`~bpy.types.TextureSlot` requires that the user select the UV Map Layer that was generated by unwrapping, See :ref:`Textures Section <textures>`.

**Example:**
#. :ref:`Create a mesh-object <geometry-mesh>`.
#. In **Edit Mode**, select the faces you want to unwrap.
#. Press U``, select **Unwrap > Smart UV Project**.

**Notes:**

* UV-unwrapping adds a :class:`~bpy.types.MeshTextureFaceLayer` to the Object.
* Although Blender allows multiple :class:`~bpy.types.MeshTextureFaceLayer`, most versions of the Nif format only support one UV layer

Vertex Color
------------
.. _geometry-vertexcolor:

**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
#. Switch to Vertex Paint mode, this automatically adds a base vertex color layer.
#. Apply the desired vertex colors evenly to the vertex.
#. Ensure you have added a :ref:`material<properties-material>`.
#. Now export as usual.

**Notes:**

* The Nif format only supports a single color per vertex, whereas Blender vertex color per face vertex.
* Blender treats the vertex as if the faces had been split apart, each face can have a different color for that vertex.
* `This image should clarify per-face vertes coloring <http://i211.photobucket.com/albums/bb189/NifTools/Blender/documentation/per_face_vertex_color.jpg>`_
* On export the scripts will take an average of colors. 

Vertex Alpha
------------
.. _geometry-vertexalpha:

Vertex alpha is handled in the same way as vertex color. The only difference is that vertex alpha use grey scale.
   
**Example:**

#. :ref:`Create a mesh-object <geometry-mesh>`.
#. Switch to Vertex Paint mode, If there are no vertex color layers this will create a new layer.
	you will need to add a second layer manually by clicking the + button in the vertex colors 
	control panel located in the object data menu.
#. In the brush menu on the left side of the screen, leave the color selector in the center and 
	use the slider on the right side to change the level of shading with white being fully visible
	and black being fully transparent.
#. Apply the shading to the vertices just as you would for :ref:`Vertex Color <geometry-vertexcolor>`

**Notes:**
* Vertex alpha must use the second vertex color layer, even if there is no color applied in first color layer
	the default color layer must be in place.
   
Version Control
---------------
.. _geometry-VersionControl:
* Nif Version
	The base version, generally related to a single game or company. Displayed in format xx.xx.xx.xx
**Example:**
	Nif Version 20.02.00.07 is the version that is used for Fallout 3

* User Version
	A two digit single integer sub value of Nif Version
	11 Would designate Fallout 3 as the specific game file.
	
* User Version 2:
	A second two digit single integer sub value, with the same function as User Version.

**Notes:**
* All three values are used to verify which data should be attached to a file during the export process.
* The values of each object are checked against the root object during export, any
	mismatches will trigger and error and alert the user so that corrections can be effected.


BS Inventory Marker
-------------------
.. _geometry-BSInvMarker:
* BS Inv Marker
	This sets the x, y, z rotation and zoom level of objects for the in game inventory display in games that support the property.
	
#. With blender in Object mode, open the BS Inv Marker property window and click + 
	This should only be applied to the Root object, For rigged meshed this should be applied to the armature, For non rigged objects it should be applied to the Mesh object
#. Apply desired values to x,y,z to set the preferred rotation.
	#. Set view to back view and use rotation to achieve the preferred object orientation.
	#. Copy the values from the rotation display into the x,y,z lines for BS Inv Marker.
	#. Delete the decimal and remove any numbers to the right of the fourth digit.
	#. Press alt + R to reset the object rotation back to 0
#. Apply desired value to zoom	
	#. a value of 1 for zoom is the default, lower values .99 to .01 decrease the item size in the menu.
		
	
**Notes:**
* Rigged objects that use this value may also use :ref:`InvMarker Bones <armature-invmarker>`.